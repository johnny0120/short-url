/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.solution.shorturl.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.solution.shorturl.api.model.UrlShortenResult;
import com.solution.shorturl.api.model.UrlShortenSpec;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-25T12:32:37.249+08:00[Asia/Shanghai]")
@Api(value = "ShortenUrl", description = "the ShortenUrl API")
public interface ShortenUrlApi {

    @ApiOperation(value = "Delete code by secret", nickname = "deleteUrl", notes = "", tags = { "Shorten Url", })
    @ApiResponses(value = { @ApiResponse(code = 204, message = "The code is cleared"),
            @ApiResponse(code = 400, message = "The code is invalid"),
            @ApiResponse(code = 401, message = "The secret is not allowed for deletion") })
    @RequestMapping(value = "/{code}", method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUrl(
            @ApiParam(value = "The code of shortened url", required = true) @PathVariable("code") String code,
            @NotNull @ApiParam(value = "The secret for delete operation", required = true) @Valid @RequestParam(value = "secret", required = true) String secret);

    @ApiOperation(value = "Get full url by code", nickname = "getUrl", notes = "", tags = { "Shorten Url", })
    @ApiResponses(value = { @ApiResponse(code = 302, message = "The record is found with a redirection response"),
            @ApiResponse(code = 400, message = "The code is invalid"),
            @ApiResponse(code = 404, message = "The code is not found") })
    @RequestMapping(value = "/{code}", method = RequestMethod.GET)
    ResponseEntity<Void> getUrl(
            @ApiParam(value = "The code of shortened url", required = true) @PathVariable("code") String code);

    @ApiOperation(value = "Create code for full url", nickname = "shortenUrl", notes = "", response = UrlShortenResult.class, tags = {
            "Shorten Url", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The record has been created", response = UrlShortenResult.class),
            @ApiResponse(code = 400, message = "The url is invalid"),
            @ApiResponse(code = 409, message = "The potential code has been taken by others") })
    @RequestMapping(value = "/", produces = { "application/json" }, consumes = {
            "application/json" }, method = RequestMethod.POST)
    ResponseEntity<UrlShortenResult> shortenUrl(
            @ApiParam(value = "Specification for creating shortened url", required = true) @Valid @RequestBody UrlShortenSpec body);

}
